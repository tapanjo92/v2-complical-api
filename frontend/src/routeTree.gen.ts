/* prettier-ignore-start */

/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file is auto-generated by TanStack Router

import { createFileRoute } from '@tanstack/react-router'

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as IndexImport } from './routes/index'
import { Route as RegisterImport } from './routes/register'
import { Route as LoginImport } from './routes/login'
import { Route as AuthImport } from './routes/_auth'
import { Route as AuthDashboardImport } from './routes/_auth.dashboard'
import { Route as AuthDashboardIndexImport } from './routes/_auth.dashboard.index'
import { Route as AuthDashboardApiKeysImport } from './routes/_auth.dashboard.api-keys'

// Create Virtual Routes

const DocsLazyImport = createFileRoute('/docs')()
const PricingLazyImport = createFileRoute('/pricing')()
const TermsLazyImport = createFileRoute('/terms')()
const PrivacyLazyImport = createFileRoute('/privacy')()

// Create/Update Routes

const DocsLazyRoute = DocsLazyImport.update({
  path: '/docs',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/docs.lazy').then((d) => d.Route))

const PricingLazyRoute = PricingLazyImport.update({
  path: '/pricing',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/pricing.lazy').then((d) => d.Route))

const TermsLazyRoute = TermsLazyImport.update({
  path: '/terms',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/terms.lazy').then((d) => d.Route))

const PrivacyLazyRoute = PrivacyLazyImport.update({
  path: '/privacy',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/privacy.lazy').then((d) => d.Route))

const IndexRoute = IndexImport.update({
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const RegisterRoute = RegisterImport.update({
  path: '/register',
  getParentRoute: () => rootRoute,
} as any)

const LoginRoute = LoginImport.update({
  path: '/login',
  getParentRoute: () => rootRoute,
} as any)

const AuthRoute = AuthImport.update({
  id: '/_auth',
  getParentRoute: () => rootRoute,
} as any)

const AuthDashboardRoute = AuthDashboardImport.update({
  path: '/dashboard',
  getParentRoute: () => AuthRoute,
} as any)

const AuthDashboardIndexRoute = AuthDashboardIndexImport.update({
  path: '/',
  getParentRoute: () => AuthDashboardRoute,
} as any)

const AuthDashboardApiKeysRoute = AuthDashboardApiKeysImport.update({
  path: '/api-keys',
  getParentRoute: () => AuthDashboardRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/_auth': {
      id: '/_auth'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof AuthImport
      parentRoute: typeof rootRoute
    }
    '/login': {
      id: '/login'
      path: '/login'
      fullPath: '/login'
      preLoaderRoute: typeof LoginImport
      parentRoute: typeof rootRoute
    }
    '/register': {
      id: '/register'
      path: '/register'
      fullPath: '/register'
      preLoaderRoute: typeof RegisterImport
      parentRoute: typeof rootRoute
    }
    '/_auth/dashboard': {
      id: '/_auth/dashboard'
      path: '/dashboard'
      fullPath: '/dashboard'
      preLoaderRoute: typeof AuthDashboardImport
      parentRoute: typeof AuthImport
    }
    '/_auth/dashboard/': {
      id: '/_auth/dashboard/'
      path: '/'
      fullPath: '/dashboard/'
      preLoaderRoute: typeof AuthDashboardIndexImport
      parentRoute: typeof AuthDashboardImport
    }
    '/_auth/dashboard/api-keys': {
      id: '/_auth/dashboard/api-keys'
      path: '/api-keys'
      fullPath: '/dashboard/api-keys'
      preLoaderRoute: typeof AuthDashboardApiKeysImport
      parentRoute: typeof AuthDashboardImport
    }
    '/docs': {
      id: '/docs'
      path: '/docs'
      fullPath: '/docs'
      preLoaderRoute: typeof DocsLazyImport
      parentRoute: typeof rootRoute
    }
    '/pricing': {
      id: '/pricing'
      path: '/pricing'
      fullPath: '/pricing'
      preLoaderRoute: typeof PricingLazyImport
      parentRoute: typeof rootRoute
    }
    '/terms': {
      id: '/terms'
      path: '/terms'
      fullPath: '/terms'
      preLoaderRoute: typeof TermsLazyImport
      parentRoute: typeof rootRoute
    }
    '/privacy': {
      id: '/privacy'
      path: '/privacy'
      fullPath: '/privacy'
      preLoaderRoute: typeof PrivacyLazyImport
      parentRoute: typeof rootRoute
    }
  }
}

// Create and export the route tree

export const routeTree = rootRoute.addChildren({
  IndexRoute,
  AuthRoute: AuthRoute.addChildren({
    AuthDashboardRoute: AuthDashboardRoute.addChildren({
      AuthDashboardIndexRoute,
      AuthDashboardApiKeysRoute,
    }),
  }),
  LoginRoute,
  RegisterRoute,
  DocsLazyRoute,
  PricingLazyRoute,
  TermsLazyRoute,
  PrivacyLazyRoute,
})

/* prettier-ignore-end */

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/_auth",
        "/login",
        "/register",
        "/docs",
        "/pricing",
        "/terms",
        "/privacy"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/_auth": {
      "filePath": "_auth.tsx",
      "children": [
        "/_auth/dashboard"
      ]
    },
    "/login": {
      "filePath": "login.tsx"
    },
    "/register": {
      "filePath": "register.tsx"
    },
    "/_auth/dashboard": {
      "filePath": "_auth.dashboard.tsx",
      "parent": "/_auth",
      "children": [
        "/_auth/dashboard/",
        "/_auth/dashboard/api-keys"
      ]
    },
    "/_auth/dashboard/": {
      "filePath": "_auth.dashboard.index.tsx",
      "parent": "/_auth/dashboard"
    },
    "/_auth/dashboard/api-keys": {
      "filePath": "_auth.dashboard.api-keys.tsx",
      "parent": "/_auth/dashboard"
    },
    "/docs": {
      "filePath": "docs.lazy.tsx"
    },
    "/pricing": {
      "filePath": "pricing.lazy.tsx"  
    },
    "/terms": {
      "filePath": "terms.lazy.tsx"
    },
    "/privacy": {
      "filePath": "privacy.lazy.tsx"
    }
  }
}
ROUTE_MANIFEST_END */